--============= соединения =============
--
--1. Выведите список названий всех фильмов и их языков (таблица language)
--* Используйте таблицу film
--* Соедините с language
--* Выведите информацию о фильмах:
--title, language."name"

SELECT f.title 
, l."name" 
FROM film f 
JOIN "language" l ON f.language_id = l.language_id 
JOIN film_category fc ON f.film_id = fc.film_id; 

--1.1 Выведите все фильмы и их категории:
--* Используйте таблицу film
--* Соедините с таблицей film_category
--* Соедините с таблицей category
--* Выведите информацию о фильмах:
--title, category."name"

SELECT f.title 
, c."name"  
FROM film f 
JOIN film_category fc ON f.film_id = fc.film_id 
JOIN category c ON fc.category_id = c.category_id; 

--2. Выведите список всех актеров, снимавшихся в фильме Lambs Cincinatti (film_id = 508). 
--* Используйте таблицу film
--* Соедините с film_actor
--* Соедините с actor
--* Отфильтруйте, используя where и "title like" (для названия) или "film_id =" (для id)

SELECT a.first_name || ' ' || a.last_name 
FROM film f 
JOIN film_actor fa ON f.film_id = fa.film_id 
JOIN actor a ON fa.actor_id = a.actor_id
WHERE f.film_id = '508';

--2.1 Выведите все магазины из города Woodridge (city_id = 576)
--* Используйте таблицу store
--* Соедините таблицу с address 
--* Соедините таблицу с city 
--* Соедините таблицу с country 
--* отфильтруйте , используя where и "city like" (для названия города) или "city_id ="  (для id)
--* Выведите полный адрес искомых магазинов и их id:
--store_id, postal_code, country, city, district, address, address2, phone

SELECT s.store_id 
,a.postal_code 
,co.country 
,c.city 
,a.district 
,a.address 
,a.address2 
,a.phone 
FROM store s 
JOIN address a ON s.address_id = a.address_id 
JOIN city c ON a.city_id = c.city_id 
JOIN country co ON c.country_id = co.country_id 
WHERE c.city_id = '576';

--============= агрегатные функции =============
--
--3. Подсчитайте количество актеров в фильме Grosse Wonderful (id - 384)
--* Используйте таблицу film
--* Соедините с film_actor
--* Отфильтруйте, используя where и "title like" (для названия) или "film_id =" (для id) 
--* Для подсчета используйте функцию count, используйте actor_id в качестве выражения внутри функции

SELECT count(fa.actor_id) counta 
FROM film f 
JOIN film_actor fa ON f.film_id = fa.film_id 
WHERE f.film_id = '384';

--3.1 Посчитайте среднюю стоимость аренды за день по всем фильмам
--* Используйте таблицу film
--* Стоимость аренды за день rental_rate/rental_duration
--* avg - функция, вычисляющая среднее значение

SELECT round(avg(rental_rate/rental_duration), 2)
FROM film f ;

--============= группировки =============
--4. Выведите список фильмов, в которых снималось больше 10 актеров
--* Используйте таблицу film
--* Соедините с film_actor
--* Сгруппируйте итоговую таблицу по film_id
--* Для каждой группы посчитайте колличество актеров
--* Воспользуйтесь фильтрацией групп, для выбора фильмов с колличеством > 10

SELECT f.title  
, count(fa.actor_id) 
FROM film f 
JOIN film_actor fa ON f.film_id = fa.film_id 
GROUP BY f.film_id 
HAVING count(fa.actor_id) > 10;

--4.1 Выведите список кактегорий фильмов, средняя продолжительность аренды которых более 5 дней
--* Используйте таблицу film
--* Соедините с таблицей film_category
--* Соедините с таблицей category
--* Сгруппируйте полученную таблицу по category.name
--* Для каждой группы посчитайте средню продолжительность аренды фильмов
--* Воспользуйтесь фильтрацией групп, для выбора категории со средней продолжительностью > 5 дней

SELECT c."name" 
, round(avg(f.rental_duration), 2)
FROM film f 
JOIN film_category fc ON f.film_id = fc.film_id 
JOIN category c ON fc.category_id = c.category_id 
GROUP BY c."name" 
HAVING avg(f.rental_duration) > 5;

--============= подзапросы =============
--
--5. Выведите количество фильмов, со стоимостью аренды за день больше, чем среднее значение по всем фильмам
--* Напишите подзапрос, который будет вычислять среднее значение стоимости аренды за день (задание 3.1)
--* Используйте таблицу film
--* Отфильтруйте строки в результирующей таблице, используя опретаор > (подзапрос)
--* count - агрегатная функция подсчета значений

SELECT count(film_id)  
FROM film f
WHERE rental_rate > (SELECT count(fa.actor_id) counta 
FROM film f 
JOIN film_actor fa ON f.film_id = fa.film_id 
WHERE f.film_id = '384');

--6. Выведите фильмы, с категорией начинающейся с буквы "C"
--* Напишите подзапрос:
-- - Используйте таблицу category
-- - Отфильтруйте строки с помощью оператора like 
--* Соедините с таблицей film_category
--* Соедините с таблицей film
--* Выведите информацию о фильмах:
--title, category."name"
SELECT f.title
, "name"
from(
SELECT * 
FROM category c 
WHERE "name" ILIKE 'c%') cc
JOIN film_category fc ON cc.category_id = fc.category_id 
JOIN film f ON fc.film_id = f.film_id ;

--6.1. Выведите фильмы, с категорией начинающейся с буквы "C", но используйте данные подзапроса в условии фильтрации
--* Используйте таблицу film
--* Соедините с таблицей film_category
--* Напишите подзапрос:
-- - Используйте таблицу category
-- - Отфильтруйте строки с помощью оператора like 
--* Используйте результат работы подзапроса в фильтрации с помощью оператора in

SELECT f.title
--, fc.category_id  
FROM film f 
JOIN film_category fc ON f.film_id = fc.film_id 
WHERE category_id IN (
SELECT c.category_id  
FROM category c 
WHERE "name" ILIKE 'c%');

--============= оконные функции =============
--
--7. Выведите таблицу с 3-мя полями: название фильма, имя актера и количество фильмов, в которых он снимался
--* Используйте таблицу film
--* Соедините с film_actor
--* Соедините с actor
--* count - агрегатная функция подсчета значений
--* Задайте окно с использованием предложений over и partition by

SELECT f.title 
, a.first_name || ' ' || a.last_name fio
, count(f.title) OVER (PARTITION BY a.actor_id) AS count_film
FROM film f 
JOIN film_actor fa ON f.film_id = fa.film_id
JOIN actor a ON fa.actor_id = a.actor_id ;

--7.1. Выведите таблицу, содержащую имена покупателей, арендованные ими фильмы и средний платеж каждого покупателя
--* используйте таблицу customer
--* соедините с paymen
--* соедините с rental
--* соедините с inventory
--* соедините с film
--* avg - функция, вычисляющая среднее значение
--* Задайте окно с использованием предложений over и partition by

SELECT c.first_name || ' ' || c.last_name fio
, f.title 
, round(avg(p.amount) OVER (PARTITION BY c.customer_id),2) AS avg_pay
FROM customer c 
JOIN payment p ON c.customer_id = p.customer_id 
JOIN rental r ON p.rental_id = r.rental_id 
JOIN inventory i ON r.inventory_id = i.inventory_id 
JOIN film f ON i.film_id = f.film_id;

--============= Домашнее задание =============
--1. Выведите магазины, имеющие больше 300-от покупателей
--* Напишите подзапрос, который будет
--- Использовать таблицу customer
--- Сгруппируйет таблицу customer по store_id
--- Посчитает покупателей в группах по store_id
--- Применит фильтрацию к результатам группировки и выберет группы с колличеством покупателей > 300
--* Соедините таблицу store и результат подзапроса
--* Соедините таблицы с address 
--* Соедините таблицы с city 
--* Соедините таблицы с country 
--* Выведет полный адрес искомых магазинов:
--postal_code, country, city, district, address, address2, phone

SELECT postal_code, country, city, district, address, address2, phone
FROM store s 
JOIN address a ON s.address_id = a.address_id
JOIN city ci ON a.city_id = ci.city_id 
JOIN country co ON ci.country_id = co.country_id 
JOIN (SELECT c.store_id 
		, count(c.customer_id) counta
	FROM customer c 
	GROUP BY c.store_id
	HAVING count(c.customer_id) > '300') st ON st.store_id = s.store_id
 

--2. Выведите у каждого покупателя город в котором он живет
--* Используйте таблицу customer
--* Соедините таблицы с address 
--* Соедините таблицы с city 
--* Соедините таблицы с country 
--* Выведет полный адрес покапателя, его имя и фамилию:
--first_name, last_name, postal_code, country, city, district, address, address2, phone

SELECT first_name, last_name, postal_code, country, city, district, address, address2, phone
FROM customer c 
JOIN address a ON a.address_id = c.address_id 
JOIN city ci ON ci.city_id = a.city_id 
JOIN country co ON ci.country_id = co.country_id 
